<?php

/**
 *4. Напиши SQL-запросы
 * Имеем следующую таблицу со списком сотрудников
 * Id
 * Name
 * LastName
 * DepartamentId
 * Salary
 * 1
 * Иван
 * Смирнов
 * 2
 * 100000
 * 2
 * Максим
 * Петров
 * 2
 * 90000
 * 3
 * Роман
 * Иванов
 * 3
 * 95000
 * …
 *
 *
 *
 *
 *
 *
 *
 * 1. Написать запрос для вывода самой большой зарплаты в каждом департаменте
 * 2. Написать запрос для вывода списка сотрудников из 3-го департамента у которых ЗП больше 90000
 * 3. Написать запрос по созданию индексов для ускорения
 *
 */

$queryOne = DB::select('
            SELECT
                departament_id,
                MAX(salary) AS max_salary
            FROM
                users
            GROUP BY
                departament_id
            ');

$departmentId = 3;
$queryTwo = DB::select('
            SELECT
                *
            FROM
                users
            WHERE
                departament_id = :departament_id
                AND salary > 90000
            ',
        ['departament_id' => $departmentId]);

/**
 *
 *  Если с первыми 2 всё понятно
 *
 * То 3 я не хочу писать, потому что это бред писать сырые запросы на создания индекса,
 * да я могу загуглить как писать сырой запрос и там будет что то типа CREATE INDEX но синтаксис я не знаю (надо напишу но камоооон...)
 *
 *
 * Если у нас нагруженный проект, скорее всего у нас есть master база слейв база
 * Я например юзал вот https://clickhouse.com/docs/en/integrations/mysql#replicate-a-mysql-database-in-clickhouse
 * А потом переключался между таблицами
 *
 * Если не запариваемся с репликациями то ну, я индексы писал в миграциях
 * Там просто пишешь ->index();
 * Если у нас постоянно вставляются данные в "условный" users то вешать индексы ну такое ибо они замедляют insert/update
 * Да они ускоряют select и ищут по другому (бинарное дерево например если просто id фотку примера прикрепил)
 *
 * Здесь можно повесить индекс на id, department_id в ларе вроде и так автоматом на все id вешаются индексы
 */